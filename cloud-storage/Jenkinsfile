pipeline {
  // with plugins: docker-pipeline, aws global configuration

  agent any

  environment {
    DOCKER_REGISTRY = "public.ecr.aws"
    DOCKER_APP_NAME = "cloud-storage"
    IMAGE_TAG = "latest"
    ROOT_DIR = "cloud-storage"
    // jenkins에서 ECR 권한이 있는 IMA credentials를 등록해야합니다.
    REGISTRY_CREDENTIALS = "gimangi-ecr-credentials"
    PATH = "/usr/bin:${env.PATH}"
  }

  stages {
    stage("Build JAR") {
      steps {
        dir(ROOT_DIR) {
          sh "./gradlew clean build"
        }
      }
    }

    stage("Build Image") {
      steps {
        // 이미지 빌드
        script {
          dir(ROOT_DIR) {
            app = docker.build("cloud-storage:${env.BUILD_NUMBER}")
          }
        }
      }
    }

    stage("Push Image") {
      steps {
        // 이미지 ECR에 푸시
        script {
          docker.withRegistry("https://${DOCKER_REGISTRY}", "ecr:us-east-1:${REGISTRY_CREDENTIALS}") {
            app.push("${DOCKER_APP_NAME}:${env.BUILD_NUMBER}")
            app.push("${DOCKER_APP_NAME}:latest")
          }
        }
      }
    }

//    stage('Blue-Green Deploy') {
//      steps {
//        script {
//          // 현재 활성화된 환경 (blue 또는 green)을 확인합니다.
//          def active_env = sh(script: "echo \$ACTIVE_ENV", returnStdout: true).trim()
//
//          if (active_env == 'blue') {
//            // green 환경으로 배포합니다.
//            sh "DOCKER_APP_NAME=${DOCKER_APP_NAME} DOCKER_REGISTRY=${DOCKER_REGISTRY} IMAGE_TAG=${IMAGE_TAG} docker-compose -f docker-compose.green.yml up -d"
//            // NGINX 설정을 업데이트하여 트래픽을 green 환경으로 전환합니다.
//            sh "cp nginx.green.conf /etc/nginx/conf.d/default.conf && sudo service nginx reload"
//            // 활성화된 환경을 green으로 변경합니다.
//            sh "export ACTIVE_ENV=green"
//          } else {
//            // blue 환경으로 배포합니다.
//            sh "DOCKER_APP_NAME=${DOCKER_APP_NAME} DOCKER_REGISTRY=${DOCKER_REGISTRY} IMAGE_TAG=${IMAGE_TAG} docker-compose -f docker-compose.blue.yml up -d"
//            // NGINX 설정을 업데이트하여 트래픽을 blue 환경으로 전환합니다.
//            sh "cp nginx.blue.conf /etc/nginx/conf.d/default.conf && sudo service nginx reload"
//            // 활성화된 환경을 blue로 변경합니다.
//            sh "export ACTIVE_ENV=blue"
//          }
//        }
//      }
//    }
  }
}
